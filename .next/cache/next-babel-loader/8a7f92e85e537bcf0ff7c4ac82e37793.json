{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/sarahdonoghue/Documents/Projects/wellness-events-app/pages/components/EventSearch/index.jsx\";\nimport exact from 'prop-types-exact';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport DayPicker, { DateUtils } from 'react-day-picker';\nimport moment from 'moment'; // import PlacesAutocomplete from 'react-places-autocomplete';\n// import { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';\n// https://react-day-picker.js.org/examples/selected-range-enter\n\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport SearchBar from 'material-ui-search-bar';\nimport Script from 'react-load-script';\nimport { AutoComplete } from 'material-ui/AutoComplete';\nvar propTypes = {\n  dateLabel: PropTypes.string,\n  locationLabel: PropTypes.string,\n  searchButtonText: PropTypes.string\n};\nvar defaultProps = {\n  dateLabel: 'When',\n  locationLabel: 'City',\n  searchButtonText: 'Search'\n};\n\nvar EventSearch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EventSearch, _Component);\n\n  function EventSearch(props) {\n    var _this;\n\n    _classCallCheck(this, EventSearch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EventSearch).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelectingFirstDay\", function (from, to, day) {\n      var isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\n      var isRangeSelected = from && to;\n      return !from || isBeforeFirstDay || isRangeSelected;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDayClick\", function (day) {\n      var _this$state = _this.state,\n          from = _this$state.from,\n          to = _this$state.to;\n\n      if (from && to && day >= from && day <= to) {\n        _this.handleResetClick();\n\n        return;\n      }\n\n      if (_this.handleSelectingFirstDay(from, to, day)) {\n        _this.setState({\n          from: day,\n          to: null,\n          enteredTo: null\n        });\n      } else {\n        _this.setState({\n          to: day,\n          enteredTo: day,\n          selectedDates: \"\".concat(moment(from).format('DD/MM/YYYY'), \" - \").concat(moment(day).format('DD/MM/YYYY'))\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDayMouseEnter\", function (day) {\n      var _this$state2 = _this.state,\n          from = _this$state2.from,\n          to = _this$state2.to;\n\n      if (!_this.handleSelectingFirstDay(from, to, day)) {\n        _this.setState({\n          enteredTo: day\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleResetClick\", function () {\n      var _this$state3 = _this.state,\n          enteredTo = _this$state3.enteredTo,\n          to = _this$state3.to,\n          from = _this$state3.from;\n\n      _this.setState({\n        enteredTo: null,\n        from: null,\n        to: null\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDatePicker\", function () {\n      var activeDatePicker = _this.state.activeDatePicker;\n\n      _this.setState({\n        activeDatePicker: !activeDatePicker\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLocationChange\", function (locationValue) {\n      _this.setState({\n        locationValue: locationValue\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelect\", function (locationValue) {\n      geocodeByAddress(locationValue).then(function (results) {\n        return getLatLng(results[0]);\n      }).then(function (latLng) {\n        return console.log('Success', latLng);\n      })[\"catch\"](function (error) {\n        return console.error('Error', error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScriptLoad\", function () {\n      // Declare Options For Autocomplete \n      var options = {\n        types: ['(cities']\n      }; // Initialize Google Autocomplete \n\n      /*global google*/\n\n      _this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('#autocomplete'), options); // Avoid paying for data that you don't need by restricting the \n      // set of place fields that are returned to just the address\n      // components and formatted address\n\n      _this.autocomplete.setFields(['address_components', 'formatted_address']); // Fire Event when a suggested name is selected\n\n\n      _this.autocomplete.addListener('place_changed', _this.handlePlaceSelect);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePlaceSelected\", function () {\n      // Extract City From Address Object\n      var addressObject = _this.autocomplete.getPlace();\n\n      var address = addressObject.address_components; // Check if address is valid\n\n      if (address) {\n        // Set State\n        _this.setState({\n          city: address[0].long_name,\n          query: addressObject.formatted_address\n        });\n      }\n    });\n\n    _this.state = {\n      activeDatePicker: false,\n      city: '',\n      query: '',\n      enteredTo: null,\n      from: null,\n      selectedDates: 'Anytime',\n      to: null\n    };\n    return _this;\n  }\n\n  _createClass(EventSearch, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          dateLabel = _this$props.dateLabel,\n          locationLabel = _this$props.locationLabel,\n          searchButtonText = _this$props.searchButtonText;\n      var _this$state4 = this.state,\n          activeDatePicker = _this$state4.activeDatePicker,\n          enteredTo = _this$state4.enteredTo,\n          from = _this$state4.from,\n          query = _this$state4.query,\n          selectedDates = _this$state4.selectedDates,\n          to = _this$state4.to;\n      var modifiers = {\n        start: from,\n        end: enteredTo\n      };\n      var disabledDays = {\n        before: from\n      };\n      var selectedDays = [from, {\n        from: from,\n        to: enteredTo\n      }];\n      return React.createElement(React.Fragment, null, React.createElement(Script, {\n        url: \"https://maps.googleapis.com/maps/api/js?ey=your_api_key\\\\u0026libraries=places\",\n        onLoad: this.handleScriptLoad,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"EventSearch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"EventSearch_container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"EventSearch_searchBar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"EventSearch_searchFilter\",\n        onClick: this.handleDatePicker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"EventSearch_label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, dateLabel), React.createElement(\"div\", {\n        className: \"EventSearch_value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, selectedDates)), React.createElement(\"div\", {\n        className: activeDatePicker ? 'EventSearch_datePicker EventSearch_datePicker-active' : 'EventSearch_datePicker',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(DayPicker, {\n        className: \"EventSearch_date\",\n        numberOfMonths: 2,\n        fromMonth: from,\n        selectedDays: selectedDays,\n        disabledDays: disabledDays,\n        modifiers: modifiers,\n        onDayClick: this.handleDayClick,\n        onDayMouseEnter: this.handleDayMouseEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"EventSearch_searchFilter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"EventSearch_label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, locationLabel), React.createElement(MuiThemeProvider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(SearchBar, {\n        id: \"#autocomplete\",\n        placeholder: \"\",\n        hintText: \"Search City\",\n        value: query,\n        style: {\n          margin: '0 auto',\n          maxWidth: 800\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"EventSearch_action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"EventSearch_button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, searchButtonText)))), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \" Events Page\")));\n    }\n  }]);\n\n  return EventSearch;\n}(Component);\n\nEventSearch.propTypes = propTypes;\nEventSearch.defaultProps = defaultProps;\nexport default EventSearch;","map":{"version":3,"sources":["/Users/sarahdonoghue/Documents/Projects/wellness-events-app/pages/components/EventSearch/index.jsx"],"names":["exact","PropTypes","React","Component","DayPicker","DateUtils","moment","MuiThemeProvider","SearchBar","Script","AutoComplete","propTypes","dateLabel","string","locationLabel","searchButtonText","defaultProps","EventSearch","props","from","to","day","isBeforeFirstDay","isDayBefore","isRangeSelected","state","handleResetClick","handleSelectingFirstDay","setState","enteredTo","selectedDates","format","activeDatePicker","locationValue","geocodeByAddress","then","results","getLatLng","latLng","console","log","error","options","types","autocomplete","google","maps","places","Autocomplete","document","getElementById","setFields","addListener","handlePlaceSelect","addressObject","getPlace","address","address_components","city","long_name","query","formatted_address","modifiers","start","end","disabledDays","before","selectedDays","handleScriptLoad","handleDatePicker","handleDayClick","handleDayMouseEnter","margin","maxWidth"],"mappings":"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","sourcesContent":["import exact from 'prop-types-exact';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nimport DayPicker, { DateUtils } from 'react-day-picker';\nimport moment from 'moment';\n// import PlacesAutocomplete from 'react-places-autocomplete';\n// import { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';\n\n// https://react-day-picker.js.org/examples/selected-range-enter\n\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport SearchBar from 'material-ui-search-bar';\n\nimport Script from 'react-load-script';\n\nimport { AutoComplete } from 'material-ui/AutoComplete';\n\nconst propTypes = {\n  dateLabel: PropTypes.string,\n  locationLabel: PropTypes.string,\n  searchButtonText: PropTypes.string,\n}\n\nconst defaultProps = {\n  dateLabel: 'When',\n  locationLabel: 'City',\n  searchButtonText: 'Search',\n\n}\n\nclass EventSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeDatePicker: false,\n      city: '',\n      query: '',\n      enteredTo: null,\n      from: null,\n      selectedDates: 'Anytime',\n      to: null,\n    }\n  }\n\n\n  handleSelectingFirstDay = (from, to, day) => {\n    const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\n    const isRangeSelected = from && to;\n    return !from || isBeforeFirstDay || isRangeSelected;\n  }\n\n\n  handleDayClick = (day) => {\n    const { from, to } = this.state;\n    if (from && to && day >= from && day <= to) {\n      this.handleResetClick();\n      return;\n    }\n    if (this.handleSelectingFirstDay(from, to, day)) {\n      this.setState({\n        from: day,\n        to: null,\n        enteredTo: null,\n      });\n    } else {\n      this.setState({\n        to: day,\n        enteredTo: day,\n        selectedDates: `${moment(from).format('DD/MM/YYYY')} - ${moment(day).format('DD/MM/YYYY')}`,\n      });\n    }\n  }\n\n\n  handleDayMouseEnter = (day) => {\n    let  { from, to } = this.state;\n    if (!this.handleSelectingFirstDay(from, to, day)) {\n      this.setState({\n        enteredTo: day,\n      });\n    }\n  }\n\n\n  handleResetClick = () => {\n    const { enteredTo, to, from } = this.state;\n    this.setState({\n      enteredTo: null,\n      from: null,\n      to: null,\n    });\n  }\n \n\n  handleDatePicker = () => {\n    const { activeDatePicker } = this.state;\n\n    this.setState({ activeDatePicker: !activeDatePicker})\n  }\n\n\n  handleLocationChange = (locationValue) => {\n    this.setState({ locationValue });\n  };\n \n\n  handleSelect = (locationValue) => {\n    geocodeByAddress(locationValue)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => console.log('Success', latLng))\n      .catch(error => console.error('Error', error));\n  };\n\n\n  handleScriptLoad = () => {\n    // Declare Options For Autocomplete \n  let options = { types: ['(cities'] }; \n  \n  // Initialize Google Autocomplete \n  /*global google*/\n  this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('#autocomplete'), options );\n  // Avoid paying for data that you don't need by restricting the \n  // set of place fields that are returned to just the address\n  // components and formatted address\n  this.autocomplete.setFields(['address_components', 'formatted_address']);\n  // Fire Event when a suggested name is selected\n  this.autocomplete.addListener('place_changed', this.handlePlaceSelect); \n  }\n\n\n  handlePlaceSelected = () => {\n     // Extract City From Address Object\n     let addressObject = this.autocomplete.getPlace();\n     let address = addressObject.address_components;\n \n     // Check if address is valid\n     if (address) {\n       // Set State\n       this.setState(\n         {\n           city: address[0].long_name,\n           query: addressObject.formatted_address,\n         }\n       );\n     }\n  }\n\n\n  render() {\n\n    const { dateLabel, locationLabel, searchButtonText } = this.props;\n    const { activeDatePicker, enteredTo, from, query, selectedDates, to } = this.state;\n    const modifiers = { start: from, end: enteredTo };\n    const disabledDays = { before: from };\n    const selectedDays = [from, { from, to: enteredTo }];\n\n    return (\n      <>\n      <Script url=\"https://maps.googleapis.com/maps/api/js?ey=your_api_key\\u0026libraries=places\" onLoad={this.handleScriptLoad} />\n      <div className=\"EventSearch\">\n        <div className=\"EventSearch_container\">\n          <div className=\"EventSearch_searchBar\">\n            <div className=\"EventSearch_searchFilter\" onClick={this.handleDatePicker}>\n              <div className=\"EventSearch_label\">\n                {dateLabel}\n              </div>\n              <div className=\"EventSearch_value\">\n                {selectedDates}\n              </div>\n            </div>\n            <div className={activeDatePicker ? 'EventSearch_datePicker EventSearch_datePicker-active' : 'EventSearch_datePicker'}>\n              <DayPicker\n                className=\"EventSearch_date\"\n                numberOfMonths={2}\n                fromMonth={from}\n                selectedDays={selectedDays}\n                disabledDays={disabledDays}\n                modifiers={modifiers}\n                onDayClick={this.handleDayClick}\n                onDayMouseEnter={this.handleDayMouseEnter}\n              />\n            </div>\n           \n            <div className=\"EventSearch_searchFilter\">\n              <div className=\"EventSearch_label\">\n                {locationLabel}\n              </div>\n              <MuiThemeProvider>\n              <SearchBar\n                id=\"#autocomplete\"\n                placeholder=\"\"\n                hintText=\"Search City\"\n                value={query}\n                style={{\n                  margin: '0 auto',\n                  maxWidth: 800,\n                }}\n              />\n              </MuiThemeProvider>\n            </div>\n            <div className=\"EventSearch_action\">\n              <button type=\"button\" className=\"EventSearch_button\">\n                {searchButtonText}\n              </button>\n            </div>\n          </div>\n        </div>\n        <h1> Events Page</h1>\n      </div>\n      </>\n    )\n  }\n}\n\nEventSearch.propTypes = propTypes;\nEventSearch.defaultProps = defaultProps;\n\nexport default EventSearch;"]},"metadata":{},"sourceType":"module"}