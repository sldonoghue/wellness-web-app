{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/sarahdonoghue/Documents/Projects/wellness-events-app/pages/components/EventSearch/index.jsx\";\nimport exact from 'prop-types-exact';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport DayPicker, { DateUtils } from 'react-day-picker';\nimport moment from 'moment'; // import PlacesAutocomplete from 'react-places-autocomplete';\n// import { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';\n// https://react-day-picker.js.org/examples/selected-range-enter\n\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport SearchBar from 'material-ui-search-bar';\nimport Script from 'react-load-script';\nimport { AutoComplete } from 'material-ui/AutoComplete';\nconst propTypes = {\n  dateLabel: PropTypes.string,\n  locationLabel: PropTypes.string,\n  searchButtonText: PropTypes.string\n};\nconst defaultProps = {\n  dateLabel: 'When',\n  locationLabel: 'City',\n  searchButtonText: 'Search'\n};\n\nclass EventSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSelectingFirstDay\", (from, to, day) => {\n      const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\n      const isRangeSelected = from && to;\n      return !from || isBeforeFirstDay || isRangeSelected;\n    });\n\n    _defineProperty(this, \"handleDayClick\", day => {\n      const {\n        from,\n        to\n      } = this.state;\n\n      if (from && to && day >= from && day <= to) {\n        this.handleResetClick();\n        return;\n      }\n\n      if (this.handleSelectingFirstDay(from, to, day)) {\n        this.setState({\n          from: day,\n          to: null,\n          enteredTo: null\n        });\n      } else {\n        this.setState({\n          to: day,\n          enteredTo: day,\n          selectedDates: `${moment(from).format('DD/MM/YYYY')} - ${moment(day).format('DD/MM/YYYY')}`\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleDayMouseEnter\", day => {\n      let {\n        from,\n        to\n      } = this.state;\n\n      if (!this.handleSelectingFirstDay(from, to, day)) {\n        this.setState({\n          enteredTo: day\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleResetClick\", () => {\n      const {\n        enteredTo,\n        to,\n        from\n      } = this.state;\n      this.setState({\n        enteredTo: null,\n        from: null,\n        to: null\n      });\n    });\n\n    _defineProperty(this, \"handleDatePicker\", () => {\n      const {\n        activeDatePicker\n      } = this.state;\n      this.setState({\n        activeDatePicker: !activeDatePicker\n      });\n    });\n\n    _defineProperty(this, \"handleLocationChange\", locationValue => {\n      this.setState({\n        locationValue\n      });\n    });\n\n    _defineProperty(this, \"handleSelect\", locationValue => {\n      geocodeByAddress(locationValue).then(results => getLatLng(results[0])).then(latLng => console.log('Success', latLng)).catch(error => console.error('Error', error));\n    });\n\n    _defineProperty(this, \"handleScriptLoad\", () => {\n      // Declare Options For Autocomplete \n      let options = {\n        types: ['(cities']\n      }; // Initialize Google Autocomplete \n\n      /*global google*/\n\n      this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), options); // Avoid paying for data that you don't need by restricting the \n      // set of place fields that are returned to just the address\n      // components and formatted address\n\n      this.autocomplete.setFields(['address_components', 'formatted_address']); // Fire Event when a suggested name is selected\n\n      this.autocomplete.addListener('place_changed', this.handlePlaceSelect);\n    });\n\n    _defineProperty(this, \"handlePlaceSelected\", () => {\n      // Extract City From Address Object\n      let addressObject = this.autocomplete.getPlace();\n      let address = addressObject.address_components; // Check if address is valid\n\n      if (address) {\n        // Set State\n        this.setState({\n          city: address[0].long_name,\n          query: addressObject.formatted_address\n        });\n      }\n    });\n\n    this.state = {\n      activeDatePicker: false,\n      city: '',\n      query: '',\n      enteredTo: null,\n      from: null,\n      selectedDates: 'Anytime',\n      to: null\n    };\n  }\n\n  render() {\n    const {\n      dateLabel,\n      locationLabel,\n      searchButtonText\n    } = this.props;\n    const {\n      activeDatePicker,\n      enteredTo,\n      from,\n      query,\n      selectedDates,\n      to\n    } = this.state;\n    const modifiers = {\n      start: from,\n      end: enteredTo\n    };\n    const disabledDays = {\n      before: from\n    };\n    const selectedDays = [from, {\n      from,\n      to: enteredTo\n    }];\n    return React.createElement(React.Fragment, null, React.createElement(Script, {\n      url: \"https://maps.googleapis.com/maps/api/js?ey=your_api_key\\\\u0026libraries=places\",\n      onLoad: this.handleScriptLoad,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"EventSearch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"EventSearch_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"EventSearch_searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"EventSearch_searchFilter\",\n      onClick: this.handleDatePicker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"EventSearch_label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, dateLabel), React.createElement(\"div\", {\n      className: \"EventSearch_value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, selectedDates)), React.createElement(\"div\", {\n      className: activeDatePicker ? 'EventSearch_datePicker EventSearch_datePicker-active' : 'EventSearch_datePicker',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(DayPicker, {\n      className: \"EventSearch_date\",\n      numberOfMonths: 2,\n      fromMonth: from,\n      selectedDays: selectedDays,\n      disabledDays: disabledDays,\n      modifiers: modifiers,\n      onDayClick: this.handleDayClick,\n      onDayMouseEnter: this.handleDayMouseEnter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"EventSearch_searchFilter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"EventSearch_label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, locationLabel), React.createElement(MuiThemeProvider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(SearchBar, {\n      id: \"#autocomplete\",\n      placeholder: \"\",\n      hintText: \"Search City\",\n      value: query,\n      style: {\n        margin: '0 auto',\n        maxWidth: 800\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"EventSearch_action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"EventSearch_button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, searchButtonText)))), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \" Events Page\")));\n  }\n\n}\n\nEventSearch.propTypes = propTypes;\nEventSearch.defaultProps = defaultProps;\nexport default EventSearch;","map":{"version":3,"sources":["/Users/sarahdonoghue/Documents/Projects/wellness-events-app/pages/components/EventSearch/index.jsx"],"names":["exact","PropTypes","React","Component","DayPicker","DateUtils","moment","MuiThemeProvider","SearchBar","Script","AutoComplete","propTypes","dateLabel","string","locationLabel","searchButtonText","defaultProps","EventSearch","constructor","props","from","to","day","isBeforeFirstDay","isDayBefore","isRangeSelected","state","handleResetClick","handleSelectingFirstDay","setState","enteredTo","selectedDates","format","activeDatePicker","locationValue","geocodeByAddress","then","results","getLatLng","latLng","console","log","catch","error","options","types","autocomplete","google","maps","places","Autocomplete","document","getElementById","setFields","addListener","handlePlaceSelect","addressObject","getPlace","address","address_components","city","long_name","query","formatted_address","render","modifiers","start","end","disabledDays","before","selectedDays","handleScriptLoad","handleDatePicker","handleDayClick","handleDayMouseEnter","margin","maxWidth"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,SAAP,IAAoBC,SAApB,QAAqC,kBAArC;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;AACA;AAEA;;AAEA,OAAOC,gBAAP,MAA6B,qCAA7B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,SAAS,EAAEX,SAAS,CAACY,MADL;AAEhBC,EAAAA,aAAa,EAAEb,SAAS,CAACY,MAFT;AAGhBE,EAAAA,gBAAgB,EAAEd,SAAS,CAACY;AAHZ,CAAlB;AAMA,MAAMG,YAAY,GAAG;AACnBJ,EAAAA,SAAS,EAAE,MADQ;AAEnBE,EAAAA,aAAa,EAAE,MAFI;AAGnBC,EAAAA,gBAAgB,EAAE;AAHC,CAArB;;AAOA,MAAME,WAAN,SAA0Bd,SAA1B,CAAoC;AAClCe,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,qDAeO,CAACC,IAAD,EAAOC,EAAP,EAAWC,GAAX,KAAmB;AAC3C,YAAMC,gBAAgB,GAAGH,IAAI,IAAIf,SAAS,CAACmB,WAAV,CAAsBF,GAAtB,EAA2BF,IAA3B,CAAjC;AACA,YAAMK,eAAe,GAAGL,IAAI,IAAIC,EAAhC;AACA,aAAO,CAACD,IAAD,IAASG,gBAAT,IAA6BE,eAApC;AACD,KAnBkB;;AAAA,4CAsBDH,GAAD,IAAS;AACxB,YAAM;AAAEF,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAe,KAAKK,KAA1B;;AACA,UAAIN,IAAI,IAAIC,EAAR,IAAcC,GAAG,IAAIF,IAArB,IAA6BE,GAAG,IAAID,EAAxC,EAA4C;AAC1C,aAAKM,gBAAL;AACA;AACD;;AACD,UAAI,KAAKC,uBAAL,CAA6BR,IAA7B,EAAmCC,EAAnC,EAAuCC,GAAvC,CAAJ,EAAiD;AAC/C,aAAKO,QAAL,CAAc;AACZT,UAAAA,IAAI,EAAEE,GADM;AAEZD,UAAAA,EAAE,EAAE,IAFQ;AAGZS,UAAAA,SAAS,EAAE;AAHC,SAAd;AAKD,OAND,MAMO;AACL,aAAKD,QAAL,CAAc;AACZR,UAAAA,EAAE,EAAEC,GADQ;AAEZQ,UAAAA,SAAS,EAAER,GAFC;AAGZS,UAAAA,aAAa,EAAG,GAAEzB,MAAM,CAACc,IAAD,CAAN,CAAaY,MAAb,CAAoB,YAApB,CAAkC,MAAK1B,MAAM,CAACgB,GAAD,CAAN,CAAYU,MAAZ,CAAmB,YAAnB,CAAiC;AAH9E,SAAd;AAKD;AACF,KAzCkB;;AAAA,iDA4CIV,GAAD,IAAS;AAC7B,UAAK;AAAEF,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAe,KAAKK,KAAzB;;AACA,UAAI,CAAC,KAAKE,uBAAL,CAA6BR,IAA7B,EAAmCC,EAAnC,EAAuCC,GAAvC,CAAL,EAAkD;AAChD,aAAKO,QAAL,CAAc;AACZC,UAAAA,SAAS,EAAER;AADC,SAAd;AAGD;AACF,KAnDkB;;AAAA,8CAsDA,MAAM;AACvB,YAAM;AAAEQ,QAAAA,SAAF;AAAaT,QAAAA,EAAb;AAAiBD,QAAAA;AAAjB,UAA0B,KAAKM,KAArC;AACA,WAAKG,QAAL,CAAc;AACZC,QAAAA,SAAS,EAAE,IADC;AAEZV,QAAAA,IAAI,EAAE,IAFM;AAGZC,QAAAA,EAAE,EAAE;AAHQ,OAAd;AAKD,KA7DkB;;AAAA,8CAgEA,MAAM;AACvB,YAAM;AAAEY,QAAAA;AAAF,UAAuB,KAAKP,KAAlC;AAEA,WAAKG,QAAL,CAAc;AAAEI,QAAAA,gBAAgB,EAAE,CAACA;AAArB,OAAd;AACD,KApEkB;;AAAA,kDAuEKC,aAAD,IAAmB;AACxC,WAAKL,QAAL,CAAc;AAAEK,QAAAA;AAAF,OAAd;AACD,KAzEkB;;AAAA,0CA4EHA,aAAD,IAAmB;AAChCC,MAAAA,gBAAgB,CAACD,aAAD,CAAhB,CACGE,IADH,CACQC,OAAO,IAAIC,SAAS,CAACD,OAAO,CAAC,CAAD,CAAR,CAD5B,EAEGD,IAFH,CAEQG,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB,CAFlB,EAGGG,KAHH,CAGSC,KAAK,IAAIH,OAAO,CAACG,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CAHlB;AAID,KAjFkB;;AAAA,8CAoFA,MAAM;AACvB;AACF,UAAIC,OAAO,GAAG;AAAEC,QAAAA,KAAK,EAAE,CAAC,SAAD;AAAT,OAAd,CAFyB,CAIzB;;AACA;;AACA,WAAKC,YAAL,GAAoB,IAAIC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CAAoCC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAApC,EAA6ER,OAA7E,CAApB,CANyB,CAOzB;AACA;AACA;;AACA,WAAKE,YAAL,CAAkBO,SAAlB,CAA4B,CAAC,oBAAD,EAAuB,mBAAvB,CAA5B,EAVyB,CAWzB;;AACA,WAAKP,YAAL,CAAkBQ,WAAlB,CAA8B,eAA9B,EAA+C,KAAKC,iBAApD;AACC,KAjGkB;;AAAA,iDAoGG,MAAM;AACzB;AACA,UAAIC,aAAa,GAAG,KAAKV,YAAL,CAAkBW,QAAlB,EAApB;AACA,UAAIC,OAAO,GAAGF,aAAa,CAACG,kBAA5B,CAHyB,CAKzB;;AACA,UAAID,OAAJ,EAAa;AACX;AACA,aAAK7B,QAAL,CACE;AACE+B,UAAAA,IAAI,EAAEF,OAAO,CAAC,CAAD,CAAP,CAAWG,SADnB;AAEEC,UAAAA,KAAK,EAAEN,aAAa,CAACO;AAFvB,SADF;AAMD;AACH,KAnHkB;;AAGjB,SAAKrC,KAAL,GAAa;AACXO,MAAAA,gBAAgB,EAAE,KADP;AAEX2B,MAAAA,IAAI,EAAE,EAFK;AAGXE,MAAAA,KAAK,EAAE,EAHI;AAIXhC,MAAAA,SAAS,EAAE,IAJA;AAKXV,MAAAA,IAAI,EAAE,IALK;AAMXW,MAAAA,aAAa,EAAE,SANJ;AAOXV,MAAAA,EAAE,EAAE;AAPO,KAAb;AASD;;AA0GD2C,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEpD,MAAAA,SAAF;AAAaE,MAAAA,aAAb;AAA4BC,MAAAA;AAA5B,QAAiD,KAAKI,KAA5D;AACA,UAAM;AAAEc,MAAAA,gBAAF;AAAoBH,MAAAA,SAApB;AAA+BV,MAAAA,IAA/B;AAAqC0C,MAAAA,KAArC;AAA4C/B,MAAAA,aAA5C;AAA2DV,MAAAA;AAA3D,QAAkE,KAAKK,KAA7E;AACA,UAAMuC,SAAS,GAAG;AAAEC,MAAAA,KAAK,EAAE9C,IAAT;AAAe+C,MAAAA,GAAG,EAAErC;AAApB,KAAlB;AACA,UAAMsC,YAAY,GAAG;AAAEC,MAAAA,MAAM,EAAEjD;AAAV,KAArB;AACA,UAAMkD,YAAY,GAAG,CAAClD,IAAD,EAAO;AAAEA,MAAAA,IAAF;AAAQC,MAAAA,EAAE,EAAES;AAAZ,KAAP,CAArB;AAEA,WACE,0CACA,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAC,gFAAZ;AAA4F,MAAA,MAAM,EAAE,KAAKyC,gBAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAEA;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAA0C,MAAA,OAAO,EAAE,KAAKC,gBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG5D,SADH,CADF,EAIE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGmB,aADH,CAJF,CADF,EASE;AAAK,MAAA,SAAS,EAAEE,gBAAgB,GAAG,sDAAH,GAA4D,wBAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,SAAS,EAAC,kBADZ;AAEE,MAAA,cAAc,EAAE,CAFlB;AAGE,MAAA,SAAS,EAAEb,IAHb;AAIE,MAAA,YAAY,EAAEkD,YAJhB;AAKE,MAAA,YAAY,EAAEF,YALhB;AAME,MAAA,SAAS,EAAEH,SANb;AAOE,MAAA,UAAU,EAAE,KAAKQ,cAPnB;AAQE,MAAA,eAAe,EAAE,KAAKC,mBARxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CATF,EAsBE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG5D,aADH,CADF,EAIE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,SAAD;AACE,MAAA,EAAE,EAAC,eADL;AAEE,MAAA,WAAW,EAAC,EAFd;AAGE,MAAA,QAAQ,EAAC,aAHX;AAIE,MAAA,KAAK,EAAEgD,KAJT;AAKE,MAAA,KAAK,EAAE;AACLa,QAAAA,MAAM,EAAE,QADH;AAELC,QAAAA,QAAQ,EAAE;AAFL,OALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAJF,CAtBF,EAuCE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,oBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG7D,gBADH,CADF,CAvCF,CADF,CADF,EAgDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAhDF,CAFA,CADF;AAuDD;;AAtLiC;;AAyLpCE,WAAW,CAACN,SAAZ,GAAwBA,SAAxB;AACAM,WAAW,CAACD,YAAZ,GAA2BA,YAA3B;AAEA,eAAeC,WAAf","sourcesContent":["import exact from 'prop-types-exact';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nimport DayPicker, { DateUtils } from 'react-day-picker';\nimport moment from 'moment';\n// import PlacesAutocomplete from 'react-places-autocomplete';\n// import { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';\n\n// https://react-day-picker.js.org/examples/selected-range-enter\n\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport SearchBar from 'material-ui-search-bar';\n\nimport Script from 'react-load-script';\n\nimport { AutoComplete } from 'material-ui/AutoComplete';\n\nconst propTypes = {\n  dateLabel: PropTypes.string,\n  locationLabel: PropTypes.string,\n  searchButtonText: PropTypes.string,\n}\n\nconst defaultProps = {\n  dateLabel: 'When',\n  locationLabel: 'City',\n  searchButtonText: 'Search',\n\n}\n\nclass EventSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeDatePicker: false,\n      city: '',\n      query: '',\n      enteredTo: null,\n      from: null,\n      selectedDates: 'Anytime',\n      to: null,\n    }\n  }\n\n\n  handleSelectingFirstDay = (from, to, day) => {\n    const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\n    const isRangeSelected = from && to;\n    return !from || isBeforeFirstDay || isRangeSelected;\n  }\n\n\n  handleDayClick = (day) => {\n    const { from, to } = this.state;\n    if (from && to && day >= from && day <= to) {\n      this.handleResetClick();\n      return;\n    }\n    if (this.handleSelectingFirstDay(from, to, day)) {\n      this.setState({\n        from: day,\n        to: null,\n        enteredTo: null,\n      });\n    } else {\n      this.setState({\n        to: day,\n        enteredTo: day,\n        selectedDates: `${moment(from).format('DD/MM/YYYY')} - ${moment(day).format('DD/MM/YYYY')}`,\n      });\n    }\n  }\n\n\n  handleDayMouseEnter = (day) => {\n    let  { from, to } = this.state;\n    if (!this.handleSelectingFirstDay(from, to, day)) {\n      this.setState({\n        enteredTo: day,\n      });\n    }\n  }\n\n\n  handleResetClick = () => {\n    const { enteredTo, to, from } = this.state;\n    this.setState({\n      enteredTo: null,\n      from: null,\n      to: null,\n    });\n  }\n \n\n  handleDatePicker = () => {\n    const { activeDatePicker } = this.state;\n\n    this.setState({ activeDatePicker: !activeDatePicker})\n  }\n\n\n  handleLocationChange = (locationValue) => {\n    this.setState({ locationValue });\n  };\n \n\n  handleSelect = (locationValue) => {\n    geocodeByAddress(locationValue)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => console.log('Success', latLng))\n      .catch(error => console.error('Error', error));\n  };\n\n\n  handleScriptLoad = () => {\n    // Declare Options For Autocomplete \n  let options = { types: ['(cities'] }; \n  \n  // Initialize Google Autocomplete \n  /*global google*/\n  this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), options );\n  // Avoid paying for data that you don't need by restricting the \n  // set of place fields that are returned to just the address\n  // components and formatted address\n  this.autocomplete.setFields(['address_components', 'formatted_address']);\n  // Fire Event when a suggested name is selected\n  this.autocomplete.addListener('place_changed', this.handlePlaceSelect); \n  }\n\n\n  handlePlaceSelected = () => {\n     // Extract City From Address Object\n     let addressObject = this.autocomplete.getPlace();\n     let address = addressObject.address_components;\n \n     // Check if address is valid\n     if (address) {\n       // Set State\n       this.setState(\n         {\n           city: address[0].long_name,\n           query: addressObject.formatted_address,\n         }\n       );\n     }\n  }\n\n\n  render() {\n\n    const { dateLabel, locationLabel, searchButtonText } = this.props;\n    const { activeDatePicker, enteredTo, from, query, selectedDates, to } = this.state;\n    const modifiers = { start: from, end: enteredTo };\n    const disabledDays = { before: from };\n    const selectedDays = [from, { from, to: enteredTo }];\n\n    return (\n      <>\n      <Script url=\"https://maps.googleapis.com/maps/api/js?ey=your_api_key\\u0026libraries=places\" onLoad={this.handleScriptLoad} />\n      <div className=\"EventSearch\">\n        <div className=\"EventSearch_container\">\n          <div className=\"EventSearch_searchBar\">\n            <div className=\"EventSearch_searchFilter\" onClick={this.handleDatePicker}>\n              <div className=\"EventSearch_label\">\n                {dateLabel}\n              </div>\n              <div className=\"EventSearch_value\">\n                {selectedDates}\n              </div>\n            </div>\n            <div className={activeDatePicker ? 'EventSearch_datePicker EventSearch_datePicker-active' : 'EventSearch_datePicker'}>\n              <DayPicker\n                className=\"EventSearch_date\"\n                numberOfMonths={2}\n                fromMonth={from}\n                selectedDays={selectedDays}\n                disabledDays={disabledDays}\n                modifiers={modifiers}\n                onDayClick={this.handleDayClick}\n                onDayMouseEnter={this.handleDayMouseEnter}\n              />\n            </div>\n           \n            <div className=\"EventSearch_searchFilter\">\n              <div className=\"EventSearch_label\">\n                {locationLabel}\n              </div>\n              <MuiThemeProvider>\n              <SearchBar\n                id=\"#autocomplete\"\n                placeholder=\"\"\n                hintText=\"Search City\"\n                value={query}\n                style={{\n                  margin: '0 auto',\n                  maxWidth: 800,\n                }}\n              />\n              </MuiThemeProvider>\n            </div>\n            <div className=\"EventSearch_action\">\n              <button type=\"button\" className=\"EventSearch_button\">\n                {searchButtonText}\n              </button>\n            </div>\n          </div>\n        </div>\n        <h1> Events Page</h1>\n      </div>\n      </>\n    )\n  }\n}\n\nEventSearch.propTypes = propTypes;\nEventSearch.defaultProps = defaultProps;\n\nexport default EventSearch;"]},"metadata":{},"sourceType":"module"}