{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/sarahdonoghue/Documents/Projects/wellness-events-app/pages/components/EventSearch/index.jsx\";\nimport exact from 'prop-types-exact';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport DayPicker, { DateUtils } from 'react-day-picker';\nimport moment from 'moment';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete'; // https://react-day-picker.js.org/examples/selected-range-enter\n\nconst propTypes = {\n  dateLabel: PropTypes.string,\n  eventbriteApiKey: PropTypes.string,\n  eventbriteLink: PropTypes.string,\n  locationLabel: PropTypes.string,\n  searchButtonText: PropTypes.string\n};\nconst defaultProps = {\n  dateLabel: 'When',\n  eventbriteApiKey: 'E3FPRWVRIRN63ML427UJ',\n  eventbriteLink: 'https://www.eventbriteapi.com/v3/events/search/?',\n  locationLabel: 'City',\n  searchButtonText: 'Search'\n};\n\nclass EventSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSelectingFirstDay\", (from, to, day) => {\n      const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\n      const isRangeSelected = from && to;\n      return !from || isBeforeFirstDay || isRangeSelected;\n    });\n\n    _defineProperty(this, \"handleDayClick\", day => {\n      const {\n        from,\n        to\n      } = this.state;\n\n      if (from && to && day >= from && day <= to) {\n        this.handleResetClick();\n        return;\n      }\n\n      if (this.handleSelectingFirstDay(from, to, day)) {\n        this.setState({\n          from: day,\n          to: null,\n          enteredTo: null\n        });\n      } else {\n        this.setState({\n          to: day,\n          enteredTo: day,\n          selectedDates: `${moment(from).format('DD/MM/YYYY')} - ${moment(day).format('DD/MM/YYYY')}`\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleDayMouseEnter\", day => {\n      let {\n        from,\n        to\n      } = this.state;\n\n      if (!this.handleSelectingFirstDay(from, to, day)) {\n        this.setState({\n          enteredTo: day\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleResetClick\", () => {\n      const {\n        enteredTo,\n        to,\n        from\n      } = this.state;\n      this.setState({\n        enteredTo: null,\n        from: null,\n        to: null\n      });\n    });\n\n    _defineProperty(this, \"handleDatePicker\", () => {\n      const {\n        activeDatePicker\n      } = this.state;\n      this.setState({\n        activeDatePicker: !activeDatePicker\n      });\n    });\n\n    _defineProperty(this, \"handleCloseDatePicker\", () => {\n      this.setState({\n        activeDatePicker: false\n      });\n    });\n\n    _defineProperty(this, \"handleLocationChange\", locationValue => {\n      this.setState({\n        locationValue\n      });\n    });\n\n    _defineProperty(this, \"handleLocationSelect\", locationValue => {\n      let {\n        latLng\n      } = this.state;\n      geocodeByAddress(locationValue).then(results => getLatLng(results[0])).then(latLng => console.log('Success', latLng)).catch(error => console.error('Error', error));\n      this.setState({\n        latLng,\n        locationValue\n      });\n    });\n\n    _defineProperty(this, \"handleSearchEvents\", () => {\n      const {\n        from,\n        enteredTo,\n        locationValue,\n        latLng\n      } = this.state;\n      const {\n        eventbriteApiKey,\n        eventbriteLink\n      } = this.props;\n      debugger;\n      const fromDate = moment(from).format('YYYY-MM-DD');\n      const searchFromDate = `${fromDate}T00:00:01Z`;\n      const toDate = moment(enteredTo).format('YYYY-MM-DD');\n      const searchToDate = `${toDate}T00:00:01Z`; // fetch(`${eventbriteLink}start_date.range_start`)\n    });\n\n    this.state = {\n      activeDatePicker: false,\n      city: '',\n      locationValue: '',\n      enteredTo: null,\n      from: null,\n      latLng: null,\n      selectedDates: 'Anytime',\n      to: null\n    };\n  }\n\n  render() {\n    const {\n      dateLabel,\n      locationLabel,\n      searchButtonText\n    } = this.props;\n    const {\n      activeDatePicker,\n      enteredTo,\n      from,\n      locationValue,\n      selectedDates,\n      to\n    } = this.state;\n    const modifiers = {\n      start: from,\n      end: enteredTo\n    };\n    const disabledDays = {\n      before: from\n    };\n    const selectedDays = [from, {\n      from,\n      to: enteredTo\n    }];\n    return React.createElement(\"div\", {\n      className: \"EventSearch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"EventSearch_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"EventSearch_searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"EventSearch_searchFilter\",\n      onClick: this.handleDatePicker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"EventSearch_label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, dateLabel), React.createElement(\"div\", {\n      className: \"EventSearch_value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, selectedDates)), React.createElement(\"div\", {\n      className: activeDatePicker ? 'EventSearch_datePicker EventSearch_datePicker-active' : 'EventSearch_datePicker',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(DayPicker, {\n      className: \"EventSearch_date\",\n      numberOfMonths: 2,\n      fromMonth: from,\n      selectedDays: selectedDays,\n      disabledDays: disabledDays,\n      modifiers: modifiers,\n      onDayClick: this.handleDayClick,\n      onDayMouseEnter: this.handleDayMouseEnter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"EventSearch_searchFilter\",\n      onClick: this.handleCloseDatePicker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"EventSearch_label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, locationLabel), React.createElement(PlacesAutocomplete, {\n      value: locationValue,\n      onChange: this.handleLocationChange,\n      onSelect: this.handleLocationSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"input\", _extends({}, getInputProps({\n      placeholder: 'Anywhere',\n      className: 'EventSearch_value'\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"EventSearch_locationContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, loading && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \" Loading...\"), suggestions.map(suggestion => {\n      const className = suggestion.active ? 'EventSearch_suggestion EventSearch_suggestion-active' : 'EventSearch_suggestion';\n      const style = suggestion.active ? {\n        backgroundColor: '#fafafa',\n        cursor: 'pointer'\n      } : {\n        backgroundColor: '#ffffff',\n        cursor: 'pointer'\n      };\n      return React.createElement(\"div\", _extends({}, getSuggestionItemProps(suggestion, {\n        className,\n        style\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, suggestion.description));\n    }))))), React.createElement(\"div\", {\n      className: \"EventSearch_action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"Button EventSearch_button\",\n      onClick: this.handleSearchEvents,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, searchButtonText)))), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \" Events Page\"));\n  }\n\n}\n\nEventSearch.propTypes = propTypes;\nEventSearch.defaultProps = defaultProps;\nexport default EventSearch;","map":{"version":3,"sources":["/Users/sarahdonoghue/Documents/Projects/wellness-events-app/pages/components/EventSearch/index.jsx"],"names":["exact","PropTypes","React","Component","DayPicker","DateUtils","moment","PlacesAutocomplete","geocodeByAddress","geocodeByPlaceId","getLatLng","propTypes","dateLabel","string","eventbriteApiKey","eventbriteLink","locationLabel","searchButtonText","defaultProps","EventSearch","constructor","props","from","to","day","isBeforeFirstDay","isDayBefore","isRangeSelected","state","handleResetClick","handleSelectingFirstDay","setState","enteredTo","selectedDates","format","activeDatePicker","locationValue","latLng","then","results","console","log","catch","error","fromDate","searchFromDate","toDate","searchToDate","city","render","modifiers","start","end","disabledDays","before","selectedDays","handleDatePicker","handleDayClick","handleDayMouseEnter","handleCloseDatePicker","handleLocationChange","handleLocationSelect","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description","handleSearchEvents"],"mappings":"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","sourcesContent":["import exact from 'prop-types-exact';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nimport DayPicker, { DateUtils } from 'react-day-picker';\nimport moment from 'moment';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';\n\n// https://react-day-picker.js.org/examples/selected-range-enter\nconst propTypes = {\n  dateLabel: PropTypes.string,\n  eventbriteApiKey: PropTypes.string,\n  eventbriteLink: PropTypes.string,\n  locationLabel: PropTypes.string,\n  searchButtonText: PropTypes.string,\n}\n\nconst defaultProps = {\n  dateLabel: 'When',\n  eventbriteApiKey: 'E3FPRWVRIRN63ML427UJ',\n  eventbriteLink: 'https://www.eventbriteapi.com/v3/events/search/?',\n  locationLabel: 'City',\n  searchButtonText: 'Search',\n\n}\n\nclass EventSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeDatePicker: false,\n      city: '',\n      locationValue: '',\n      enteredTo: null,\n      from: null,\n      latLng: null,\n      selectedDates: 'Anytime',\n      to: null,\n    }\n  }\n\n  handleSelectingFirstDay = (from, to, day) => {\n    const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\n    const isRangeSelected = from && to;\n    return !from || isBeforeFirstDay || isRangeSelected;\n  }\n\n\n  handleDayClick = (day) => {\n    const { from, to } = this.state;\n    if (from && to && day >= from && day <= to) {\n      this.handleResetClick();\n      return;\n    }\n    if (this.handleSelectingFirstDay(from, to, day)) {\n      this.setState({\n        from: day,\n        to: null,\n        enteredTo: null,\n      });\n    } else {\n      this.setState({\n        to: day,\n        enteredTo: day,\n        selectedDates: `${moment(from).format('DD/MM/YYYY')} - ${moment(day).format('DD/MM/YYYY')}`,\n      });\n    }\n  }\n\n\n  handleDayMouseEnter = (day) => {\n    let  { from, to } = this.state;\n    if (!this.handleSelectingFirstDay(from, to, day)) {\n      this.setState({\n        enteredTo: day,\n      });\n    }\n  }\n\n\n  handleResetClick = () => {\n    const { enteredTo, to, from } = this.state;\n    this.setState({\n      enteredTo: null,\n      from: null,\n      to: null,\n    });\n  }\n \n\n  handleDatePicker = () => {\n    const { activeDatePicker } = this.state;\n\n    this.setState({ activeDatePicker: !activeDatePicker})\n  }\n\n\n  handleCloseDatePicker = () => {\n    this.setState({ activeDatePicker: false });\n  }\n\n\n  handleLocationChange = (locationValue) => {\n    this.setState({ locationValue });\n  };\n \n\n  handleLocationSelect = (locationValue) => {\n    let { latLng } = this.state;\n\n    geocodeByAddress(locationValue)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => console.log('Success', latLng))\n      .catch(error => console.error('Error', error));\n      this.setState({latLng, locationValue});\n  };\n\n  handleSearchEvents = () => {\n    const { from, enteredTo, locationValue, latLng } = this.state;\n    const { eventbriteApiKey, eventbriteLink } = this.props;\n    debugger\n    \n    const fromDate = moment(from).format('YYYY-MM-DD');\n    const searchFromDate = `${fromDate}T00:00:01Z`;\n\n    const toDate = moment(enteredTo).format('YYYY-MM-DD');\n    const searchToDate = `${toDate}T00:00:01Z`;\n\n    // fetch(`${eventbriteLink}start_date.range_start`)\n  }\n\n\n  render() {\n    const { dateLabel, locationLabel, searchButtonText } = this.props;\n    const { activeDatePicker, enteredTo, from, locationValue, selectedDates, to } = this.state;\n    const modifiers = { start: from, end: enteredTo };\n    const disabledDays = { before: from };\n    const selectedDays = [from, { from, to: enteredTo }];\n\n    return (\n      <div className=\"EventSearch\">\n        <div className=\"EventSearch_container\">\n          <div className=\"EventSearch_searchBar\">\n            <div className=\"EventSearch_searchFilter\" onClick={this.handleDatePicker}>\n              <div className=\"EventSearch_label\">\n                {dateLabel}\n              </div>\n              <div className=\"EventSearch_value\">\n                {selectedDates}\n              </div>\n            </div>\n            <div className={activeDatePicker ? 'EventSearch_datePicker EventSearch_datePicker-active' : 'EventSearch_datePicker'}>\n              <DayPicker\n                className=\"EventSearch_date\"\n                numberOfMonths={2}\n                fromMonth={from}\n                selectedDays={selectedDays}\n                disabledDays={disabledDays}\n                modifiers={modifiers}\n                onDayClick={this.handleDayClick}\n                onDayMouseEnter={this.handleDayMouseEnter}\n              />\n            </div>\n           \n            <div className=\"EventSearch_searchFilter\" onClick={this.handleCloseDatePicker}>\n              <div className=\"EventSearch_label\">\n                {locationLabel}\n              </div>\n\n                <PlacesAutocomplete\n                  value={locationValue}\n                  onChange={this.handleLocationChange}\n                  onSelect={this.handleLocationSelect}\n                >\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                  <div>\n                    <input\n                      {...getInputProps({\n                        placeholder: 'Anywhere',\n                        className: 'EventSearch_value',\n                      })}\n                    />\n                    <div className=\"EventSearch_locationContainer\">\n                      {loading && <div> Loading...</div>}\n                      {suggestions.map(suggestion => {\n                        const className = suggestion.active ? 'EventSearch_suggestion EventSearch_suggestion-active' : 'EventSearch_suggestion';\n                        const style = suggestion.active ? { backgroundColor: '#fafafa', cursor: 'pointer' } : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                        return (\n                          <div\n                            {...getSuggestionItemProps(suggestion, {className, style})}\n                          >\n                            <span>\n                              {suggestion.description}\n                            </span>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n                </PlacesAutocomplete>\n            </div>\n            <div className=\"EventSearch_action\">\n              <button type=\"button\" className=\"Button EventSearch_button\" onClick={this.handleSearchEvents}>\n                {searchButtonText}\n              </button>\n            </div>\n          </div>\n        </div>\n        <h1> Events Page</h1>\n      </div>\n    )\n  }\n}\n\nEventSearch.propTypes = propTypes;\nEventSearch.defaultProps = defaultProps;\n\nexport default EventSearch;"]},"metadata":{},"sourceType":"module"}