{"version":3,"file":"static/webpack/static/development/pages/events.js.377b8bc159e676994653.hot-update.js","sources":["webpack:///./pages/components/EventSearch/index.jsx"],"sourcesContent":["import exact from 'prop-types-exact';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nimport DayPicker, { DateUtils } from 'react-day-picker';\nimport moment from 'moment';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';\n\nimport EventsResults from './EventsResults';\n\n// https://react-day-picker.js.org/examples/selected-range-enter\nconst propTypes = {\n  dateLabel: PropTypes.string,\n  eventbriteApiKey: PropTypes.string,\n  eventbriteLink: PropTypes.string,\n  locationLabel: PropTypes.string,\n  paragraph: PropTypes.string,\n  searchButtonText: PropTypes.string,\n  title: PropTypes.string,\n}\n\nconst defaultProps = {\n  dateLabel: 'When',\n  // eventbriteApiKey: 'E3FPRWVRIRN63ML427UJ',\n  eventbriteApiKey: '34KC3DZI63QGVN6RGLEA',\n  eventbriteLink: 'https://www.eventbriteapi.com/v3/events/search/?',\n  locationLabel: 'City',\n  paragraph: 'Use the search bar above to find your ideal wellness event.',\n  searchButtonText: 'Search',\n  title: 'Event Search Page',\n}\n\nclass EventSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeDatePicker: false,\n      city: '',\n      events: [],\n      eventsFilterCopy: [],\n      locationValue: '',\n      enteredTo: null,\n      from: null,\n      latLng: null,\n      loading: false,\n      selectedDates: 'Anytime',\n      selectedFilter: 'All',\n      to: null,\n    }\n  }\n\n  handleSelectingFirstDay = (from, to, day) => {\n    const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\n    const isRangeSelected = from && to;\n    return !from || isBeforeFirstDay || isRangeSelected;\n  }\n\n\n  handleDayClick = (day) => {\n    const { from, to } = this.state;\n    if (from && to && day >= from && day <= to) {\n      this.handleResetClick();\n      return;\n    }\n    if (this.handleSelectingFirstDay(from, to, day)) {\n      this.setState({\n        from: day,\n        to: null,\n        enteredTo: null,\n      });\n    } else {\n      this.setState({\n        to: day,\n        enteredTo: day,\n        selectedDates: `${moment(from).format('DD/MM/YYYY')} - ${moment(day).format('DD/MM/YYYY')}`,\n      });\n    }\n  }\n\n\n  handleDayMouseEnter = (day) => {\n    let  { from, to } = this.state;\n    if (!this.handleSelectingFirstDay(from, to, day)) {\n      this.setState({\n        enteredTo: day,\n      });\n    }\n  }\n\n\n  handleResetClick = () => {\n    const { enteredTo, to, from } = this.state;\n    this.setState({\n      enteredTo: null,\n      from: null,\n      to: null,\n    });\n  }\n \n\n  handleDatePicker = () => {\n    const { activeDatePicker } = this.state;\n\n    this.setState({ activeDatePicker: !activeDatePicker})\n  }\n\n\n  handleCloseDatePicker = () => {\n    this.setState({ activeDatePicker: false });\n  }\n\n\n  handleLocationChange = (locationValue) => {\n    this.setState({ locationValue });\n  };\n \n\n  handleLocationSelect = (locationValue) => {\n    let { latLng } = this.state;\n\n    geocodeByAddress(locationValue)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => {\n        this.setState({latLng})\n      })\n      .catch(error => console.error('Error', error));\n      this.setState({ locationValue});\n  };\n\n\n  handleSearchEvents = () => {\n    const { from, enteredTo, events, locationValue, latLng } = this.state;\n    const { eventbriteApiKey, eventbriteLink } = this.props;\n\n    if (!locationValue) return this.setState({requiredMessage: 'Please enter a location'});\n\n    this.setState({ loading: true })\n\n    if (locationValue && from) {\n      this.setState({requiredMessage: ''});\n\n      const fromDate = moment(from).format('YYYY-MM-DD');\n      const searchFromDate = `${fromDate}T00:00:01Z`;\n\n      const toDate = moment(enteredTo).format('YYYY-MM-DD');\n      const searchToDate = `${toDate}T00:00:01Z`;\n\n      fetch(`${eventbriteLink}start_date.range_start=${searchFromDate}&start_date.range_end=${searchToDate}&location.longitude=${latLng.lng}&location.latitude=${latLng.lat}&categories=108&token=${eventbriteApiKey}`)\n      .then(response => {\n        debugger\n        return response.json();\n      }).then(data => {\n        this.setState({\n          events: data.events,\n          eventsFilterCopy: data.events,\n          loading: false,\n          selectedFilter: 'All'\n        })\n      })\n      .catch(error => console.log('Error', error));\n    }\n\n    if(locationValue && !from) {\n      const currentDate = moment().format('YYYY-MM-DD');\n      const searchFromDate = `${currentDate}T00:00:01Z`;\n\n      fetch(`${eventbriteLink}start_date.range_start=${searchFromDate}&location.longitude=${latLng.lng}&location.latitude=${latLng.lat}&categories=108&token=${eventbriteApiKey}`)\n      .then(response => {\n        return response.json();\n      }).then(data => {\n        this.setState({events: data.events})\n      })\n      .catch(error => console.log('Error', error));\n    }\n  }\n\n\n  handleFilter = (event) => {\n    let { events, eventsFilterCopy, selectedFilter } = this.state;\n    \n    const selected = event.currentTarget.value;\n    const totalEvents = eventsFilterCopy;\n    \n    if(selected === 'All') {\n      this.setState({\n        events: eventsFilterCopy,\n        selectedFilter: selected\n      })\n    }\n   \n    if(selected === 'Free') {\n      let filteredFreeEvents = [];\n\n      totalEvents.forEach((event) => {\n        if(event.is_free === true) {\n          filteredFreeEvents.push(event)\n        }\n      })\n      this.setState({\n        events: filteredFreeEvents,\n        selectedFilter: selected\n      })\n    }\n\n    if(selected === '£££') {\n      let filteredPaidEvents = [];\n\n      totalEvents.forEach((event) => {\n        if(event.is_free === false) {\n          filteredPaidEvents.push(event)\n        }\n      })\n      this.setState({\n        events: filteredPaidEvents,\n        selectedFilter: selected\n      })\n    }\n  }\n\n\n  render() {\n    const { dateLabel, locationLabel, paragraph, searchButtonText, title } = this.props;\n    const { activeDatePicker, enteredTo, events, from, locationValue, loading, requiredMessage, selectedDates, to, visibleItems } = this.state;\n    const modifiers = { start: from, end: enteredTo };\n    const disabledDays = { before: from };\n    const selectedDays = [from, { from, to: enteredTo }];\n    const today = new Date();\n\n    return (\n      <div className=\"EventSearch\">\n        <div className=\"EventSearch_container\">\n          <div className=\"EventSearch_searchBar\">\n            <div className=\"EventSearch_searchFilter\" onClick={this.handleDatePicker}>\n              <div className=\"EventSearch_label\">\n                {dateLabel}\n              </div>\n              <div className=\"EventSearch_value\">\n                {selectedDates}\n              </div>\n            </div>\n            <div className={activeDatePicker ? 'EventSearch_datePicker EventSearch_datePicker-active' : 'EventSearch_datePicker'}>\n              <DayPicker\n                className=\"EventSearch_date\"\n                numberOfMonths={2}\n                fromMonth={from}\n                selectedDays={selectedDays}\n                disabledDays={{before: today}}\n                modifiers={modifiers}\n                onDayClick={this.handleDayClick}\n                onDayMouseEnter={this.handleDayMouseEnter}\n              />\n            </div>\n           \n            <div className=\"EventSearch_searchFilter\" onClick={this.handleCloseDatePicker}>\n              <div className=\"EventSearch_label\">\n                {locationLabel}\n              </div>\n\n                <PlacesAutocomplete\n                  value={locationValue}\n                  onChange={this.handleLocationChange}\n                  onSelect={this.handleLocationSelect}\n                >\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                  <div>\n                    <input\n                      {...getInputProps({\n                        placeholder: 'Anywhere',\n                        className: 'EventSearch_value',\n                      })}\n                    />\n                    <div className=\"EventSearch_locationContainer\">\n                      {loading && <div> Loading...</div>}\n                      {suggestions.map(suggestion => {\n                        const className = suggestion.active ? 'EventSearch_suggestion EventSearch_suggestion-active' : 'EventSearch_suggestion';\n                        const style = suggestion.active ? { backgroundColor: '#fafafa', cursor: 'pointer' } : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                        return (\n                          <div\n                            {...getSuggestionItemProps(suggestion, {className, style})}\n                          >\n                            <span>\n                              {suggestion.description}\n                            </span>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n                </PlacesAutocomplete>\n                {requiredMessage != ''\n                  && (\n                    <div className=\"EventSearch_required\">\n                      {requiredMessage}\n                    </div>\n                  )}\n            </div>\n            <div className=\"EventSearch_action\">\n              <button type=\"button\" className=\"Button EventSearch_button\" onClick={this.handleSearchEvents}>\n                {searchButtonText}\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"EventSearch_resultsContainer\">\n          <>\n            {(events.length === 0 && !loading)\n              && \n              (\n                <>\n                  <h2 className=\"EventSearch_title\">\n                    {title}\n                  </h2>\n                  <div className=\"EventSearch_paragraph\">\n                    {paragraph}\n                  </div>\n                </>\n              )\n            }\n            {loading\n              && (\n                <section className=\"EventSearch_loadingContent\">\n                  <div className=\"EventSearch_loading EventSearch_loading-title\" />\n\n                  <div className=\"EventSearch_loadingCardContent\">\n                    <div className=\"EventSearch_loadingCard\">\n                      <div className=\"EventSearch_loading EventSearch_loading-image\" />\n                      <div className=\"EventSearch_loading EventSearch_loading-cardTitle\" />\n                      <div className=\"EventSearch_loading EventSearch_loading-info\" />\n                      <div className=\"EventSearch_loading EventSearch_loading-info\" />\n                      <div className=\"EventSearch_loading EventSearch_loading-info\" />\n                    </div>\n                    <div className=\"EventSearch_loadingCard\">\n                      <div className=\"EventSearch_loading EventSearch_loading-image\" />\n                      <div className=\"EventSearch_loading EventSearch_loading-cardTitle\" />\n                      <div className=\"EventSearch_loading EventSearch_loading-info\" />\n                      <div className=\"EventSearch_loading EventSearch_loading-info\" />\n                      <div className=\"EventSearch_loading EventSearch_loading-info\" />\n                    </div>\n                    <div className=\"EventSearch_loadingCard\">\n                      <div className=\"EventSearch_loading EventSearch_loading-image\" />\n                      <div className=\"EventSearch_loading EventSearch_loading-cardTitle\" />\n                      <div className=\"EventSearch_loading EventSearch_loading-info\" />\n                      <div className=\"EventSearch_loading EventSearch_loading-info\" />\n                      <div className=\"EventSearch_loading EventSearch_loading-info\" />\n                    </div>\n                  </div>\n                </section>\n              )\n            }\n            {(events.length > 0 && !loading)\n              && \n                (\n                <>\n                  <h2 className=\"EventSearch_title\">\n                    {`Wellness Events in ${locationValue}`}\n                  </h2>\n                  <div className=\"EventSearch_filterContainer\">\n            \n                      <select className=\"EventSearch_filter\" value={this.state.selectedFilter} onChange={this.handleFilter}>\n                        <option className=\"EventSearch_option\" value='All'>All</option>\n                        <option className=\"EventSearch_option\" value='Free'>Free</option>\n                        <option className=\"EventSearch_option\" value=\"£££\">£££</option>\n                      </select>\n                  \n                  </div>\n                  <EventsResults\n                    items={events}\n                  />\n                </>\n              )\n            }\n          </>\n        </div>\n      </div>\n    )\n  }\n}\n\nEventSearch.propTypes = propTypes;\nEventSearch.defaultProps = defaultProps;\n\nexport default EventSearch;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAoBA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AA9CA;AAgDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAxDA;AA0DA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAlEA;AAoEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAzEA;AA4EA;AAAA;AAAA;AACA;AACA;AA9EA;AAiFA;AAAA;AAAA;AACA;AACA;AAnFA;AAqFA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAhGA;AAkGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AA/IA;AAiJA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAHA;AAiBA;AACA;;;AA0KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AARA;AAYA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAFA;AAKA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAOA;AAtBA;AA6BA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AAMA;AAAA;AAGA;AAAA;AAQA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAUA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AADA;AAUA;;;;AAzVA;AACA;AA2VA;AACA;AAEA;;;;A","sourceRoot":""}