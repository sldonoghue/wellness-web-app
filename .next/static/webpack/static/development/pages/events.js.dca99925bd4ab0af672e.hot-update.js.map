{"version":3,"file":"static/webpack/static/development/pages/events.js.dca99925bd4ab0af672e.hot-update.js","sources":["webpack:///./pages/components/EventSearch/index.jsx"],"sourcesContent":["import exact from 'prop-types-exact';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nimport DayPicker, { DateUtils } from 'react-day-picker';\nimport moment from 'moment';\n// import PlacesAutocomplete from 'react-places-autocomplete';\n// import { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';\n\n// https://react-day-picker.js.org/examples/selected-range-enter\n\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport SearchBar from 'material-ui-search-bar';\n\nimport Script from 'react-load-script';\n\nimport { AutoComplete } from 'material-ui/AutoComplete';\n\nconst propTypes = {\n  dateLabel: PropTypes.string,\n  locationLabel: PropTypes.string,\n  searchButtonText: PropTypes.string,\n}\n\nconst defaultProps = {\n  dateLabel: 'When',\n  locationLabel: 'City',\n  searchButtonText: 'Search',\n\n}\n\nclass EventSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeDatePicker: false,\n      city: '',\n      query: '',\n      enteredTo: null,\n      from: null,\n      selectedDates: 'Anytime',\n      to: null,\n    }\n  }\n\n\n  handleSelectingFirstDay = (from, to, day) => {\n    const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\n    const isRangeSelected = from && to;\n    return !from || isBeforeFirstDay || isRangeSelected;\n  }\n\n\n  handleDayClick = (day) => {\n    const { from, to } = this.state;\n    if (from && to && day >= from && day <= to) {\n      this.handleResetClick();\n      return;\n    }\n    if (this.handleSelectingFirstDay(from, to, day)) {\n      this.setState({\n        from: day,\n        to: null,\n        enteredTo: null,\n      });\n    } else {\n      this.setState({\n        to: day,\n        enteredTo: day,\n        selectedDates: `${moment(from).format('DD/MM/YYYY')} - ${moment(day).format('DD/MM/YYYY')}`,\n      });\n    }\n  }\n\n\n  handleDayMouseEnter = (day) => {\n    let  { from, to } = this.state;\n    if (!this.handleSelectingFirstDay(from, to, day)) {\n      this.setState({\n        enteredTo: day,\n      });\n    }\n  }\n\n\n  handleResetClick = () => {\n    const { enteredTo, to, from } = this.state;\n    this.setState({\n      enteredTo: null,\n      from: null,\n      to: null,\n    });\n  }\n \n\n  handleDatePicker = () => {\n    const { activeDatePicker } = this.state;\n\n    this.setState({ activeDatePicker: !activeDatePicker})\n  }\n\n\n  handleLocationChange = (locationValue) => {\n    this.setState({ locationValue });\n  };\n \n\n  handleSelect = (locationValue) => {\n    geocodeByAddress(locationValue)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => console.log('Success', latLng))\n      .catch(error => console.error('Error', error));\n  };\n\n\n  handleScriptLoad = () => {\n    // Declare Options For Autocomplete \n  let options = { types: ['(cities'] }; \n  \n  // Initialize Google Autocomplete \n  /*global google*/\n  this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), options );\n  // Avoid paying for data that you don't need by restricting the \n  // set of place fields that are returned to just the address\n  // components and formatted address\n  this.autocomplete.setFields(['address_components', 'formatted_address']);\n  // Fire Event when a suggested name is selected\n  this.autocomplete.addListener('place_changed', this.handlePlaceSelect); \n  }\n\n\n  handlePlaceSelected = () => {\n     // Extract City From Address Object\n     let addressObject = this.autocomplete.getPlace();\n     let address = addressObject.address_components;\n \n     // Check if address is valid\n     if (address) {\n       // Set State\n       this.setState(\n         {\n           city: address[0].long_name,\n           query: addressObject.formatted_address,\n         }\n       );\n     }\n  }\n\n\n  render() {\n\n    const { dateLabel, locationLabel, searchButtonText } = this.props;\n    const { activeDatePicker, enteredTo, from, query, selectedDates, to } = this.state;\n    const modifiers = { start: from, end: enteredTo };\n    const disabledDays = { before: from };\n    const selectedDays = [from, { from, to: enteredTo }];\n\n    return (\n      <>\n      <Script url=\"https://maps.googleapis.com/maps/api/js?ey=your_api_key\\u0026libraries=places\" onLoad={this.handleScriptLoad} />\n      <div className=\"EventSearch\">\n        <div className=\"EventSearch_container\">\n          <div className=\"EventSearch_searchBar\">\n            <div className=\"EventSearch_searchFilter\" onClick={this.handleDatePicker}>\n              <div className=\"EventSearch_label\">\n                {dateLabel}\n              </div>\n              <div className=\"EventSearch_value\">\n                {selectedDates}\n              </div>\n            </div>\n            <div className={activeDatePicker ? 'EventSearch_datePicker EventSearch_datePicker-active' : 'EventSearch_datePicker'}>\n              <DayPicker\n                className=\"EventSearch_date\"\n                numberOfMonths={2}\n                fromMonth={from}\n                selectedDays={selectedDays}\n                disabledDays={disabledDays}\n                modifiers={modifiers}\n                onDayClick={this.handleDayClick}\n                onDayMouseEnter={this.handleDayMouseEnter}\n              />\n            </div>\n           \n            <div className=\"EventSearch_searchFilter\">\n              <div className=\"EventSearch_label\">\n                {locationLabel}\n              </div>\n              <MuiThemeProvider>\n              <SearchBar\n                id=\"#autocomplete\"\n                placeholder=\"\"\n                hintText=\"Search City\"\n                value={query}\n                style={{\n                  margin: '0 auto',\n                  maxWidth: 800,\n                }}\n              />\n              </MuiThemeProvider>\n            </div>\n            <div className=\"EventSearch_action\">\n              <button type=\"button\" className=\"EventSearch_button\">\n                {searchButtonText}\n              </button>\n            </div>\n          </div>\n        </div>\n        <h1> Events Page</h1>\n      </div>\n      </>\n    )\n  }\n}\n\nEventSearch.propTypes = propTypes;\nEventSearch.defaultProps = defaultProps;\n\nexport default EventSearch;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AACA;AAMA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAgBA;AACA;AACA;AACA;AACA;AApBA;AAsBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AA1CA;AA4CA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AApDA;AAsDA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA9DA;AAgEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AArEA;AAwEA;AAAA;AAAA;AACA;AACA;AA1EA;AA6EA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAlFA;AAqFA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAlGA;AAqGA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AAjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAHA;AAYA;AACA;;;AAyGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAtLA;AACA;AAwLA;AACA;AAEA;;;;A","sourceRoot":""}