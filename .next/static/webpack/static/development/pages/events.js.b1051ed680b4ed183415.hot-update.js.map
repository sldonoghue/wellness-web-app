{"version":3,"file":"static/webpack/static/development/pages/events.js.b1051ed680b4ed183415.hot-update.js","sources":["webpack:///./pages/components/EventSearch/index.jsx"],"sourcesContent":["import exact from 'prop-types-exact';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nimport DayPicker, { DateUtils } from 'react-day-picker';\nimport moment from 'moment';\nimport PlacesAutocomplete from 'react-places-autocomplete';\nimport { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';\n\nimport EventsResults from './EventsResults';\n\n// https://react-day-picker.js.org/examples/selected-range-enter\nconst propTypes = {\n  dateLabel: PropTypes.string,\n  eventbriteApiKey: PropTypes.string,\n  eventbriteLink: PropTypes.string,\n  locationLabel: PropTypes.string,\n  searchButtonText: PropTypes.string,\n}\n\nconst defaultProps = {\n  dateLabel: 'When',\n  eventbriteApiKey: 'E3FPRWVRIRN63ML427UJ',\n  eventbriteLink: 'https://www.eventbriteapi.com/v3/events/search/?',\n  locationLabel: 'City',\n  searchButtonText: 'Search',\n\n}\n\nclass EventSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeDatePicker: false,\n      city: '',\n      events: null,\n      locationValue: '',\n      enteredTo: null,\n      from: null,\n      latLng: null,\n      selectedDates: 'Anytime',\n      to: null,\n    }\n  }\n\n  handleSelectingFirstDay = (from, to, day) => {\n    const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\n    const isRangeSelected = from && to;\n    return !from || isBeforeFirstDay || isRangeSelected;\n  }\n\n\n  handleDayClick = (day) => {\n    const { from, to } = this.state;\n    if (from && to && day >= from && day <= to) {\n      this.handleResetClick();\n      return;\n    }\n    if (this.handleSelectingFirstDay(from, to, day)) {\n      this.setState({\n        from: day,\n        to: null,\n        enteredTo: null,\n      });\n    } else {\n      this.setState({\n        to: day,\n        enteredTo: day,\n        selectedDates: `${moment(from).format('DD/MM/YYYY')} - ${moment(day).format('DD/MM/YYYY')}`,\n      });\n    }\n  }\n\n\n  handleDayMouseEnter = (day) => {\n    let  { from, to } = this.state;\n    if (!this.handleSelectingFirstDay(from, to, day)) {\n      this.setState({\n        enteredTo: day,\n      });\n    }\n  }\n\n\n  handleResetClick = () => {\n    const { enteredTo, to, from } = this.state;\n    this.setState({\n      enteredTo: null,\n      from: null,\n      to: null,\n    });\n  }\n \n\n  handleDatePicker = () => {\n    const { activeDatePicker } = this.state;\n\n    this.setState({ activeDatePicker: !activeDatePicker})\n  }\n\n\n  handleCloseDatePicker = () => {\n    this.setState({ activeDatePicker: false });\n  }\n\n\n  handleLocationChange = (locationValue) => {\n    this.setState({ locationValue });\n  };\n \n\n  handleLocationSelect = (locationValue) => {\n    let { latLng } = this.state;\n\n    geocodeByAddress(locationValue)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => {\n        console.log('Success', latLng),\n        this.setState({latLng})\n      })\n      .catch(error => console.error('Error', error));\n      this.setState({ locationValue});\n  };\n\n  handleSearchEvents = () => {\n    const { from, enteredTo, events, latLng } = this.state;\n    const { eventbriteApiKey, eventbriteLink } = this.props;\n    \n    const fromDate = moment(from).format('YYYY-MM-DD');\n    const searchFromDate = `${fromDate}T00:00:01Z`;\n\n    const toDate = moment(enteredTo).format('YYYY-MM-DD');\n    const searchToDate = `${toDate}T00:00:01Z`;\n\n    let results = [];\n\n    fetch(`${eventbriteLink}start_date.range_start=${searchFromDate}&start_date.range_end=${searchToDate}&location.longitude=${latLng.lng}&location.latitude=${latLng.lat}&categories=107&token=${eventbriteApiKey}`)\n    .then(response => {\n      return response.json();\n    }).then(data => {\n      debugger\n      this.setState({events: data.events})\n    })\n    // this.setState({events: results})\n    // debugger\n    // .catch(error => console.log('Error', error));\n  }\n\n\n  render() {\n    const { dateLabel, locationLabel, searchButtonText } = this.props;\n    const { activeDatePicker, enteredTo, events, from, locationValue, selectedDates, to } = this.state;\n    const modifiers = { start: from, end: enteredTo };\n    const disabledDays = { before: from };\n    const selectedDays = [from, { from, to: enteredTo }];\n\n    return (\n      <div className=\"EventSearch\">\n        <div className=\"EventSearch_container\">\n          <div className=\"EventSearch_searchBar\">\n            <div className=\"EventSearch_searchFilter\" onClick={this.handleDatePicker}>\n              <div className=\"EventSearch_label\">\n                {dateLabel}\n              </div>\n              <div className=\"EventSearch_value\">\n                {selectedDates}\n              </div>\n            </div>\n            <div className={activeDatePicker ? 'EventSearch_datePicker EventSearch_datePicker-active' : 'EventSearch_datePicker'}>\n              <DayPicker\n                className=\"EventSearch_date\"\n                numberOfMonths={2}\n                fromMonth={from}\n                selectedDays={selectedDays}\n                disabledDays={disabledDays}\n                modifiers={modifiers}\n                onDayClick={this.handleDayClick}\n                onDayMouseEnter={this.handleDayMouseEnter}\n              />\n            </div>\n           \n            <div className=\"EventSearch_searchFilter\" onClick={this.handleCloseDatePicker}>\n              <div className=\"EventSearch_label\">\n                {locationLabel}\n              </div>\n\n                <PlacesAutocomplete\n                  value={locationValue}\n                  onChange={this.handleLocationChange}\n                  onSelect={this.handleLocationSelect}\n                >\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                  <div>\n                    <input\n                      {...getInputProps({\n                        placeholder: 'Anywhere',\n                        className: 'EventSearch_value',\n                      })}\n                    />\n                    <div className=\"EventSearch_locationContainer\">\n                      {loading && <div> Loading...</div>}\n                      {suggestions.map(suggestion => {\n                        const className = suggestion.active ? 'EventSearch_suggestion EventSearch_suggestion-active' : 'EventSearch_suggestion';\n                        const style = suggestion.active ? { backgroundColor: '#fafafa', cursor: 'pointer' } : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                        return (\n                          <div\n                            {...getSuggestionItemProps(suggestion, {className, style})}\n                          >\n                            <span>\n                              {suggestion.description}\n                            </span>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n                </PlacesAutocomplete>\n            </div>\n            <div className=\"EventSearch_action\">\n              <button type=\"button\" className=\"Button EventSearch_button\" onClick={this.handleSearchEvents}>\n                {searchButtonText}\n              </button>\n            </div>\n          </div>\n        </div>\n        {!events\n          && (\n            <div>Heading + Paragraph </div>\n          )}\n          {events.length > 1\n            && (\n              <>\n                <div>\n                  {`Wellness Events in ${locationValue}`}\n                </div>\n                <EventsResults\n                  items={events}\n                />\n              </>\n            )}\n      </div>\n    )\n  }\n}\n\nEventSearch.propTypes = propTypes;\nEventSearch.defaultProps = defaultProps;\n\nexport default EventSearch;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAQA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AA3CA;AA6CA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AArDA;AAuDA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA/DA;AAiEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAtEA;AAyEA;AAAA;AAAA;AACA;AACA;AA3EA;AA8EA;AAAA;AAAA;AACA;AACA;AAhFA;AAkFA;AAGA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA9FA;AA+FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAHA;AAcA;AACA;;;AAytBA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAvNA;AACA;AAyNA;AACA;AAEA;;;;A","sourceRoot":""}